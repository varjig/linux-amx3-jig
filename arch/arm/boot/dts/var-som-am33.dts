/*
 * Copyright (C) 2014 Variscite LTD - http://www.variscite.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am33xx.dtsi"
#include <dt-bindings/interrupt-controller/irq.h>

/ {
	model = "Variscite AM335x SOM";
	compatible = "ti,var-som-am33", "ti,am33xx";

	cpus {
		cpu@0 {
			cpu0-supply = <&vdd1_reg>;
		};
	};

	memory {
		device_type = "memory";
		reg = <0x80000000 0x10000000>; /* 256 MB */
	};
	
	vbat: fixedregulator@0 {
		compatible = "regulator-fixed";
		regulator-name = "vbat";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-boot-on;
	};

	wlan_en_reg: fixedregulator@1 {
		compatible = "regulator-fixed";
		regulator-name = "wlan-en-regulator";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <1800000>;
		gpio = <&gpio3 21 GPIO_ACTIVE_HIGH>;
		enable-active-high;
	};

#if 0
	vmmc_fixed: fixedregulator@2 {
		compatible = "regulator-fixed";
		regulator-name = "vmmc_fixed";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
		regulator-boot-on;
	};

	gpio_buttons: gpio_buttons@0 {
		compatible = "gpio-keys";
		#address-cells = <1>;
		#size-cells = <0>;

		switch@1 {
			label = "button0";
			linux,code = <0x100>;
			gpios = <&gpio3 4 GPIO_ACTIVE_LOW>;
			gpio-key,wakeup;
		};
	};

	backlight {
		compatible = "pwm-backlight";
		pwms = <&ehrpwm0 0 50000 0>;
		brightness-levels = <0 58 61 66 75 90 125 170 255>;
		default-brightness-level = <8>;
	};
#endif
	
	sound {
		compatible = "simple-audio-card";
		simple-audio-card,name = "VAR-SOM-AM33";
		simple-audio-card,widgets =
			"Headphone", "Headphone Jack",
			"Line", "Line In";
		simple-audio-card,routing =
			"Headphone Jack",	"HPLOUT",
			"Headphone Jack",	"HPROUT",
			"LINE1L",		"Line In",
			"LINE1R",		"Line In";
		simple-audio-card,format = "dsp_b";
		simple-audio-card,bitclock-master = <&sound_master>;
		simple-audio-card,frame-master = <&sound_master>;
		simple-audio-card,bitclock-inversion;

		simple-audio-card,cpu {
			sound-dai = <&mcasp0>;
		};

		sound_master: simple-audio-card,codec {
			sound-dai = <&tlv320aic3106>;
			system-clock-frequency = <24000000>;
		};
	};

#if 0
	panel {
		compatible = "ti,tilcdc,panel";
		status = "okay";
		pinctrl-names = "default";
		pinctrl-0 = <&lcd_pins>;
		panel-info {
			ac-bias           = <255>;
			ac-bias-intrpt    = <0>;
			dma-burst-sz      = <16>;
			bpp               = <32>;
			fdd               = <0x80>;
			sync-edge         = <0>;
			sync-ctrl         = <1>;
			raster-order      = <0>;
			fifo-th           = <0>;
		};

		display-timings {
			800x480p62 {
				clock-frequency = <30000000>;
				hactive = <800>;
				vactive = <480>;
				hfront-porch = <39>;
				hback-porch = <39>;
				hsync-len = <47>;
				vback-porch = <29>;
				vfront-porch = <13>;
				vsync-len = <2>;
				hsync-active = <1>;
				vsync-active = <1>;
			};
		};
	};

	kim {
		compatible = "kim";
 		nshutdown_gpio = <105>; /* Bank3, pin9 */
 		dev_name = "/dev/ttyS1";
 		flow_cntrl = <1>;
 		baud_rate = <3000000>;
 	};
 	
 	btwilink {
		compatible = "btwilink";
	};
#endif
};
	
&am33xx_pinmux {
		pinctrl-names = "default";
		pinctrl-0 = <&clkout1_pin &gpio0_pins &gpio1_pins &gpio2_pins &gpio3_pins>;

		i2c0_pins: pinmux_i2c0_pins {
			pinctrl-single,pins = <
				0x188 (PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_sda.i2c0_sda */
				0x18c (PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_scl.i2c0_scl */
			>;
		};

		i2c1_pins: pinmux_i2c1_pins {
			pinctrl-single,pins = <
				0x158 (PIN_INPUT_PULLUP | MUX_MODE2)	/* spi0_d1.i2c1_sda */
				0x15c (PIN_INPUT_PULLUP | MUX_MODE2)	/* spi0_cs0.i2c1_scl */
			>;
		};

		uart0_pins_default: pinmux_uart0_pins_default {
			pinctrl-single,pins = <
				0x170 (PIN_INPUT_PULLUP | MUX_MODE0)	/* uart0_rxd.uart0_rxd */
				0x174 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart0_txd.uart0_txd */
			>;
		};

		uart1_pins_default: pinmux_uart1_pins_default {
			pinctrl-single,pins = <
				0x178 (PIN_INPUT | MUX_MODE0)		/* uart1_ctsn.uart1_ctsn */
				0x17C (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart1_rtsn.uart1_rtsn */
				0x180 (PIN_INPUT_PULLUP | MUX_MODE0)	/* uart1_rxd.uart1_rxd */
				0x184 (PIN_OUTPUT | MUX_MODE0)		/* uart1_txd.uart1_txd */
			>;
		};

		clkout1_pin: pinmux_clkout1_pin {
			pinctrl-single,pins = <
				0x1b0 (PIN_OUTPUT_PULLDOWN | MUX_MODE3)	/* xdma_event_intr0.clkout1 */
			>;
		};

		nandflash_pins_default: nandflash_pins_default {
			pinctrl-single,pins = <
				0x0 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad0.gpmc_ad0 */
				0x4 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad1.gpmc_ad1 */
				0x8 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad2.gpmc_ad2 */
				0xc (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad3.gpmc_ad3 */
				0x10 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad4.gpmc_ad4 */
				0x14 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad5.gpmc_ad5 */
				0x18 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad6.gpmc_ad6 */
				0x1c (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad7.gpmc_ad7 */
				0x70 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_wait0.gpmc_wait0 */
				0x74 (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_wpn.gpio0_30 */
				0x7c (PIN_OUTPUT | MUX_MODE0)		/* gpmc_csn0.gpmc_csn0  */
				0x90 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_advn_ale.gpmc_advn_ale */
				0x94 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_oen_ren.gpmc_oen_ren */
				0x98 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_wen.gpmc_wen */
				0x9c (PIN_OUTPUT | MUX_MODE0)		/* gpmc_ben0_cle.gpmc_ben0_cle */

			>;
		};

		nandflash_pins_sleep: nandflash_pins_sleep {
			pinctrl-single,pins = <
				0x0 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x4 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x8 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0xc (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x10 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x14 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x18 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x1c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x70 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x74 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x7c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x90 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x94 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x98 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x9c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};

		cpsw_default: cpsw_default {
			pinctrl-single,pins = <
				/* Slave 1 */
				0x10c (PIN_INPUT_PULLDOWN | MUX_MODE1)     /* mii1_crs.rmii1_crs_dv */
				0x110 (PIN_INPUT_PULLDOWN | MUX_MODE1)     /* mii1_rxerr.rmii1_rxerr */
				0x114 (PIN_OUTPUT | MUX_MODE1)             /* mii1_txen.rmii1_txen */
				0x124 (PIN_OUTPUT | MUX_MODE1)             /* mii1_txd1.rmii1_txd1 */
				0x128 (PIN_OUTPUT | MUX_MODE1)             /* mii1_txd0.rmii1_txd0 */
				0x13c (PIN_INPUT_PULLDOWN | MUX_MODE1)     /* mii1_rxd1.rmii1_rxd1 */
				0x140 (PIN_INPUT_PULLDOWN | MUX_MODE1)     /* mii1_rxd0.rmii1_rxd0 */
				0x144 (PIN_INPUT_PULLDOWN | MUX_MODE0)     /* rmii1_refclk.rmii1_refclk */
				0x138 (PIN_INPUT_PULLUP | MUX_MODE7)       /* mii1_rxd2.gpio2_19 */

#if 0 
				/* Slave 2 */
				0x40 (PIN_OUTPUT | MUX_MODE2)	           /* gpmc_a0.rgmii2_tctl */
				0x44 (PIN_INPUT_PULLDOWN | MUX_MODE2)	   /* gpmc_a1.rgmii2_rctl */
				0x48 (PIN_OUTPUT | MUX_MODE2)	           /* gpmc_a2.rgmii2_td3 */
				0x4c (PIN_OUTPUT | MUX_MODE2)              /* gpmc_a3.rgmii2_td2 */
				0x50 (PIN_OUTPUT | MUX_MODE2)              /* gpmc_a4.rgmii2_td1 */
				0x54 (PIN_OUTPUT | MUX_MODE2)              /* gpmc_a5.rgmii2_td0 */
				0x58 (PIN_OUTPUT | MUX_MODE2)              /* gpmc_a6.rgmii2_tclk */
				0x5c (PIN_INPUT_PULLDOWN | MUX_MODE2)      /* gpmc_a7.rgmii2_rclk */
				0x60 (PIN_INPUT_PULLDOWN | MUX_MODE2)      /* gpmc_a8.rgmii2_rd3 */
				0x64 (PIN_INPUT_PULLDOWN | MUX_MODE2)      /* gpmc_a9.rgmii2_rd2 */
				0x68 (PIN_INPUT_PULLDOWN | MUX_MODE2)      /* gpmc_a10.rgmii2_rd1 */
				0x6c (PIN_INPUT_PULLDOWN | MUX_MODE2)      /* gpmc_a11.rgmii2_rd0 */
				0x108 (PIN_INPUT_PULLDOWN | MUX_MODE1)     /* mii1_col.rmii2_refclk */
				0x130 (PIN_INPUT_PULLUP | MUX_MODE7)       /* mii1_rxclk.gpio3_10 */
#endif
			>;
		};

		cpsw_sleep: cpsw_sleep {
			pinctrl-single,pins = <
				/* Slave 1 reset value */
				0x10c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x110 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x114 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x124 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x128 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x13c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x140 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x144 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x138 (PIN_INPUT_PULLUP | MUX_MODE7)       /* mii1_rxd2.gpio2_19 */

#if 0 
				/* Slave 2 reset value */
				0x40 (PIN_INPUT_PULLDOWN | MUX_MODE7) 
				0x44 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x48 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x4c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x50 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x54 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x58 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x5c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x60 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x64 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x68 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x6c (PIN_INPUT_PULLDOWN | MUX_MODE7)
#endif
			>;
		};

		davinci_mdio_default: davinci_mdio_default {
			pinctrl-single,pins = <
				/* MDIO */
				0x148 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)	/* mdio_data.mdio_data */
				0x14c (PIN_OUTPUT_PULLUP | MUX_MODE0)			/* mdio_clk.mdio_clk */
			>;
		};

		davinci_mdio_sleep: davinci_mdio_sleep {
			pinctrl-single,pins = <
				/* MDIO reset value */
				0x148 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x14c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};

		mmc1_pins_default: pinmux_mmc1_pins {
			pinctrl-single,pins = <
				0x0F0 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat3.mmc0_dat3 */
				0x0F4 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat2.mmc0_dat2 */
				0x0F8 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat1.mmc0_dat1 */
				0x0FC (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat0.mmc0_dat0 */
				0x100 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_clk.mmc0_clk */
				0x104 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_cmd.mmc0_cmd */
			>;
		};

		mmc1_pins_sleep: pinmux_mmc1_pins_sleep {
			pinctrl-single,pins = <
				0x0F0 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x0F4 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x0F8 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x0FC (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x100 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x104 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};


#if 0 
		lcd_pins_default: lcd_pins_default {
			pinctrl-single,pins = <
				0xa0 0x00	/* lcd_data0.lcd_data0, OUTPUT | MODE0 */
				0xa4 0x00	/* lcd_data1.lcd_data1, OUTPUT | MODE0 */
				0xa8 0x00	/* lcd_data2.lcd_data2, OUTPUT | MODE0 */
				0xac 0x00	/* lcd_data3.lcd_data3, OUTPUT | MODE0 */
				0xb0 0x00	/* lcd_data4.lcd_data4, OUTPUT | MODE0 */
				0xb4 0x00	/* lcd_data5.lcd_data5, OUTPUT | MODE0 */
				0xb8 0x00	/* lcd_data6.lcd_data6, OUTPUT | MODE0 */
				0xbc 0x00	/* lcd_data7.lcd_data7, OUTPUT | MODE0 */
				0xc0 0x00	/* lcd_data8.lcd_data8, OUTPUT | MODE0 */
				0xc4 0x00	/* lcd_data9.lcd_data9, OUTPUT | MODE0 */
				0xc8 0x00	/* lcd_data10.lcd_data10, OUTPUT | MODE0 */
				0xcc 0x00	/* lcd_data11.lcd_data11, OUTPUT | MODE0 */
				0xd0 0x00	/* lcd_data12.lcd_data12, OUTPUT | MODE0 */
				0xd4 0x00	/* lcd_data13.lcd_data13, OUTPUT | MODE0 */
				0xd8 0x00	/* lcd_data14.lcd_data14, OUTPUT | MODE0 */
				0xdc 0x00	/* lcd_data15.lcd_data15, OUTPUT | MODE0 */
				0xe0 0x00	/* lcd_vsync.lcd_vsync, OUTPUT | MODE0 */
				0xe4 0x00	/* lcd_hsync.lcd_hsync, OUTPUT | MODE0 */
				0xe8 0x00	/* lcd_pclk.lcd_pclk, OUTPUT | MODE0 */
				0xec 0x00	/* lcd_ac_bias_en.lcd_ac_bias_en, OUTPUT | MODE0 */
			>;
		};

		lcd_pins_sleep: lcd_pins_sleep {
			pinctrl-single,pins = <
				0xa0 (PULL_DISABLE | MUX_MODE7)		/* lcd_data0.lcd_data0 */
				0xa4 (PULL_DISABLE | MUX_MODE7)		/* lcd_data1.lcd_data1 */
				0xa8 (PULL_DISABLE | MUX_MODE7)		/* lcd_data2.lcd_data2 */
				0xac (PULL_DISABLE | MUX_MODE7)		/* lcd_data3.lcd_data3 */
				0xb0 (PULL_DISABLE | MUX_MODE7)		/* lcd_data4.lcd_data4 */
				0xb4 (PULL_DISABLE | MUX_MODE7)		/* lcd_data5.lcd_data5 */
				0xb8 (PULL_DISABLE | MUX_MODE7)		/* lcd_data6.lcd_data6 */
				0xbc (PULL_DISABLE | MUX_MODE7)		/* lcd_data7.lcd_data7 */
				0xc0 (PULL_DISABLE | MUX_MODE7)		/* lcd_data8.lcd_data8 */
				0xc4 (PULL_DISABLE | MUX_MODE7)		/* lcd_data9.lcd_data9 */
				0xc8 (PULL_DISABLE | MUX_MODE7)		/* lcd_data10.lcd_data10 */
				0xcc (PULL_DISABLE | MUX_MODE7)		/* lcd_data11.lcd_data11 */
				0xd0 (PULL_DISABLE | MUX_MODE7)		/* lcd_data12.lcd_data12 */
				0xd4 (PULL_DISABLE | MUX_MODE7)		/* lcd_data13.lcd_data13 */
				0xd8 (PULL_DISABLE | MUX_MODE7)		/* lcd_data14.lcd_data14 */
				0xdc (PULL_DISABLE | MUX_MODE7)		/* lcd_data15.lcd_data15 */
				0xe0 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* lcd_vsync.lcd_vsync, OUTPUT | MODE0 */
				0xe4 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* lcd_hsync.lcd_hsync */
				0xe8 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* lcd_pclk.lcd_pclk */
				0xec (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* lcd_ac_bias_en.lcd_ac_bias_en */
			>;
		};
#endif

		mcasp0_pins: mcasp0_pins {
			pinctrl-single,pins = <
				0x190 (PIN_INPUT_PULLDOWN | MUX_MODE0)  /* mcasp0_aclkx.mcasp0_aclkx */
				0x194 (PIN_INPUT_PULLDOWN | MUX_MODE0)  /* mcasp0_fsx.mcasp0_fsx */
				0x1A0 (PIN_INPUT_PULLDOWN | MUX_MODE2)  /* mcasp0_aclkr.mcasp0_axr2 */
				0x1A4 (PIN_INPUT_PULLDOWN | MUX_MODE2)  /* mcasp0_fsr.mcasp0_axr3 */
			>;
		};

		mcasp0_sleep_pins: mcasp0_sleep_pins {
			pinctrl-single,pins = <
				0x190 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x194 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x1A0 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x1A4 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};

		/* wl12xx/wl18xx card on mmc2 */
		mmc2_pins_default: pinmux_mmc2_pins_default {
			pinctrl-single,pins = <
				0x20 (PIN_INPUT_PULLUP | MUX_MODE2)	/* gpmc_ad8.mmc1_dat0 */
				0x24 (PIN_INPUT_PULLUP | MUX_MODE2)	/* gpmc_ad9.mmc1_dat1 */
				0x28 (PIN_INPUT_PULLUP | MUX_MODE2)	/* gpmc_ad10.mmc1_dat2 */
				0x2c (PIN_INPUT_PULLUP | MUX_MODE2)	/* gpmc_ad11.mmc1_dat3 */
				0x84 (PIN_INPUT_PULLUP | MUX_MODE2)	/* gpmc_csn2.mmc1_cmd */
				0x80 (PIN_INPUT_PULLUP | MUX_MODE2)	/* gpmc_csn1.mmc1_clk */
			>;
		};

		/* wl12xx/wl18xx card on mmc2 */
		mmc2_pins_sleep: pinmux_mmc2_pins_sleep {
			pinctrl-single,pins = <
				0x20 (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_ad8.mmc1_dat0 */
				0x24 (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_ad9.mmc1_dat1 */
				0x28 (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_ad10.mmc1_dat2 */
				0x2c (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_ad11.mmc1_dat3 */
				0x84 (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_csn2.mmc1_cmd */
				0x80 (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_csn1.mmc1_clk */
			>;
		};

		/* wl12xx/wl18xx card enable/irq GPIOs. */
		wlan_pins_default: pinmux_wlan_pins_default {
			pinctrl-single,pins = <
				0x1AC (PIN_OUTPUT_PULLUP | MUX_MODE7)	/* mcasp0_ahclkx.gpio3_21, WL_EN */
				0x1A8 (PIN_INPUT_PULLUP  | MUX_MODE7)	/* mcasp0_axr1.gpio3_20, WL_IRQ */
				0x12C (PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* mii1_txclk.gpio3_9, BT_EN */
			>;
		};

		wlan_pins_sleep: pinmux_wlan_pins_sleep {
			pinctrl-single,pins = <
				0x1AC (PIN_OUTPUT_PULLUP | MUX_MODE7)   /* mcasp0_ahclkx.gpio3_21, WL_EN */
				0x1A8 (PIN_INPUT_PULLUP  | MUX_MODE7)   /* mcasp0_axr1.gpio3_20, WL_IRQ */
				0x12C (PIN_OUTPUT_PULLUP | MUX_MODE7)   /* mii1_txclk.gpio3_9, BT_EN */
			>;
		};

#if 0
		/* ft5x06 irq GPIO. */
		edt_ft5x06_pins: pinmux_edt_ft5x06_pins {
			pinctrl-single,pins = <
				0x154 0x27	/* spi0_d0.gpio0_3, INPUT | MODE7 */
			>;
		};

		dcan0_default: dcan0_default_pins {
			pinctrl-single,pins = <
				0x11c (PIN_OUTPUT_PULLDOWN | MUX_MODE1)	 /* AM33XX_CONTROL_PADCONF_MII1_TXD3_OFFSET			0x091C */
				0x120 (PIN_INPUT_PULLUP | MUX_MODE1)     /* AM33XX_CONTROL_PADCONF_MII1_TXD2_OFFSET			0x0920 */
			>;
		};
#endif

		gpio0_pins: gpio0_pins_default {
			pinctrl-single,pins = <
				0x160 ( PIN_INPUT | MUX_MODE7 ) /* (C15) spi0_cs1.gpio0[6] */
				0x164 ( PIN_INPUT | MUX_MODE7 ) /* (C18) eCAP0_in_PWM0_out.gpio0[7] */
				0xd0  ( PIN_INPUT | MUX_MODE7 ) /* (V2) lcd_data12.gpio0[8] */
				0xd4  ( PIN_INPUT | MUX_MODE7 ) /* (V3) lcd_data13.gpio0[9] */
				0xd8  ( PIN_INPUT | MUX_MODE7 ) /* (V4) lcd_data14.gpio0[10] */
				0xdc  ( PIN_INPUT | MUX_MODE7 ) /* (T5) lcd_data15.gpio0[11] */
				0x11c ( PIN_INPUT | MUX_MODE7 ) /* (J18) gmii1_txd3.gpio0[16] */
				0x120 ( PIN_INPUT | MUX_MODE7 ) /* (K15) gmii1_txd2.gpio0[17] */
			>;
		};

		gpio1_pins: gpio1_pins_default {
			pinctrl-single,pins = <
				0x30 ( PIN_INPUT | MUX_MODE7 ) /* (T12) gpmc_ad12.gpio1[12] */
				0x34 ( PIN_INPUT | MUX_MODE7 ) /* (R12) gpmc_ad13.gpio1[13] */
				0x38 ( PIN_INPUT | MUX_MODE7 ) /* (V13) gpmc_ad14.gpio1[14] */
				0x3c ( PIN_INPUT | MUX_MODE7 ) /* (U13) gpmc_ad15.gpio1[15] */
				0x40 ( PIN_INPUT | MUX_MODE7 ) /* (R13) gpmc_a0.gpio1[16] */
				0x44 ( PIN_INPUT | MUX_MODE7 ) /* (V14) gpmc_a1.gpio1[17] */
				0x48 ( PIN_INPUT | MUX_MODE7 ) /* (U14) gpmc_a2.gpio1[18] */
				0x4c ( PIN_INPUT | MUX_MODE7 ) /* (T14) gpmc_a3.gpio1[19] */
				0x50 ( PIN_INPUT | MUX_MODE7 ) /* (R14) gpmc_a4.gpio1[20] */
				0x54 ( PIN_INPUT | MUX_MODE7 ) /* (V15) gpmc_a5.gpio1[21] */
				0x58 ( PIN_INPUT | MUX_MODE7 ) /* (U15) gpmc_a6.gpio1[22] */
				0x5c ( PIN_INPUT | MUX_MODE7 ) /* (T15) gpmc_a7.gpio1[23] */
				0x60 ( PIN_INPUT | MUX_MODE7 ) /* (V16) gpmc_a8.gpio1[24] */
				0x64 ( PIN_INPUT | MUX_MODE7 ) /* (U16) gpmc_a9.gpio1[25] */
				0x68 ( PIN_INPUT | MUX_MODE7 ) /* (T16) gpmc_a10.gpio1[26] */
				0x6c ( PIN_INPUT | MUX_MODE7 ) /* (V17) gpmc_a11.gpio1[27] */
				0x78 ( PIN_INPUT | MUX_MODE7 ) /* (U18) gpmc_be1n.gpio1[28] */
			>;
		};

		gpio2_pins: gpio2_pins_default {
			pinctrl-single,pins = <
				0x88 ( PIN_INPUT | MUX_MODE7 ) /* (T13) gpmc_csn3.gpio2[0] */
				0x8c ( PIN_INPUT | MUX_MODE7 ) /* (V12) gpmc_clk.gpio2[1] */
				0xa0 ( PIN_INPUT | MUX_MODE7 ) /* (R1) lcd_data0.gpio2[6] */
				0xa4 ( PIN_INPUT | MUX_MODE7 ) /* (R2) lcd_data1.gpio2[7] */
				0xa8 ( PIN_INPUT | MUX_MODE7 ) /* (R3) lcd_data2.gpio2[8] */
				0xac ( PIN_INPUT | MUX_MODE7 ) /* (R4) lcd_data3.gpio2[9] */
				0xb0 ( PIN_INPUT | MUX_MODE7 ) /* (T1) lcd_data4.gpio2[10] */
				0xb4 ( PIN_INPUT | MUX_MODE7 ) /* (T2) lcd_data5.gpio2[11] */
				0xb8 ( PIN_INPUT | MUX_MODE7 ) /* (T3) lcd_data6.gpio2[12] */
				0xbc ( PIN_INPUT | MUX_MODE7 ) /* (T4) lcd_data7.gpio2[13] */
				0xc0 ( PIN_INPUT | MUX_MODE7 ) /* (U1) lcd_data8.gpio2[14] */
				0xc4 ( PIN_INPUT | MUX_MODE7 ) /* (U2) lcd_data9.gpio2[15] */
				0xc8 ( PIN_INPUT | MUX_MODE7 ) /* (U3) lcd_data10.gpio2[16] */
				0xcc ( PIN_INPUT | MUX_MODE7 ) /* (U4) lcd_data11.gpio2[17] */
				0x134 ( PIN_INPUT | MUX_MODE7 ) /* (L17) gmii1_rxd3.gpio2[18] */
				0xe0 ( PIN_INPUT | MUX_MODE7 ) /* (U5) lcd_vsync.gpio2[22] */
				0xe4 ( PIN_INPUT | MUX_MODE7 ) /* (R5) lcd_hsync.gpio2[23] */
				0xe8 ( PIN_INPUT | MUX_MODE7 ) /* (V5) lcd_pclk.gpio2[24] */
				0xec ( PIN_INPUT | MUX_MODE7 ) /* (R6) lcd_ac_bias_en.gpio2[25] */
			>;
		};

		gpio3_pins: gpio3_pins_default {
			pinctrl-single,pins = <
				0x1e4 ( PIN_INPUT | MUX_MODE7 ) /* (C14) EMU0.gpio3[7] */
				0x1e8 ( PIN_INPUT | MUX_MODE7 ) /* (B14) EMU1.gpio3[8] */
			>;
		};
};

&uart0 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins_default>;

	status = "okay";
};

&uart1 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart1_pins_default>;

	status = "okay";
};

&i2c0 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c0_pins>;

	status = "okay";
	clock-frequency = <400000>;
	/* Set OPP50 (0.95V) for VDD core */
	sleep-sequence = /bits/ 8 <
		0x02 0x2d 0x25 0x1f /* Set VDD2 to 0.95V */
	>;

	/* Set OPP100 (1.10V) for VDD core */
	wake-sequence = /bits/ 8 <
		0x02 0x2d 0x25 0x2b /* Set VDD2 to 1.1V */
	>;
};

&usb {
	status = "okay";
};

&usb_ctrl_mod {
	status = "okay";
};

&usb0_phy {
	status = "okay";
};

&usb1_phy {
	status = "okay";
};

&usb0 {
	status = "okay";
	dr_mode = "host";
};

&usb1 {
	status = "okay";
	dr_mode = "host";
};

&cppi41dma  {
	status = "okay";
};

&i2c1 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c1_pins>;

	status = "okay";
	clock-frequency = <100000>;

	tps: tps@2d {
		reg = <0x2d>;
	};

	tlv320aic3106: tlv320aic3106@1b {
		#sound-dai-cells = <0>;
		compatible = "ti,tlv320aic3106";
		reg = <0x1b>;
		status = "okay";

		/* Regulators */
		AVDD-supply = <&vaux2_reg>;
		IOVDD-supply = <&vaux2_reg>;
		DRVDD-supply = <&vaux2_reg>;
		DVDD-supply = <&vbat>;
	};
#if 0
	edt_ft5x06_ts@38 {
		status = "okay";
		compatible = "edt,edt-ft5206";
		pinctrl-names = "default";
		pinctrl-0 = <&edt_ft5x06_pins>;
		reg = <0x38>;
		interrupt-parent = <&gpio0>;
		interrupts = <3 IRQ_TYPE_NONE>;
	};
#endif
};

&elm {
	status = "okay";
};

#if 0
&epwmss0 {
	status = "okay";

	ehrpwm0: pwm@48300200 {
		status = "okay";
		pinctrl-names = "default";
		pinctrl-0 = <&ehrpwm_pins>;
	};
};
#endif

&gpmc {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&nandflash_pins_default>;
	pinctrl-1 = <&nandflash_pins_sleep>;
	ranges = <0 0 0x08000000 0x10000000>;	/* CS0: NAND */
	nand@0,0 {
		compatible = "ti,omap2-nand";
		reg = <0 0 4>; /* CS0, offset 0, IO size 4 */
		interrupt-parent = <&gpmc>;
		interrupts = <0 IRQ_TYPE_NONE>, /* fifoevent */
			     <1 IRQ_TYPE_NONE>;	/* termcount */
		rb-gpios = <&gpmc 0 GPIO_ACTIVE_HIGH>; /* gpmc_wait0 */
		ti,nand-ecc-opt= "bch8";
		ti,elm-id = <&elm>;
		nand-bus-width = <8>;
		gpmc,device-width = <1>;
		gpmc,sync-clk-ps = <0>;
		gpmc,cs-on-ns = <0>;
		gpmc,cs-rd-off-ns = <44>;
		gpmc,cs-wr-off-ns = <44>;
		gpmc,adv-on-ns = <6>;
		gpmc,adv-rd-off-ns = <34>;
		gpmc,adv-wr-off-ns = <44>;
		gpmc,we-on-ns = <0>;
		gpmc,we-off-ns = <40>;
		gpmc,oe-on-ns = <0>;
		gpmc,oe-off-ns = <54>;
		gpmc,access-ns = <64>;
		gpmc,rd-cycle-ns = <82>;
		gpmc,wr-cycle-ns = <82>;
		gpmc,wait-on-read = "true";
		gpmc,wait-on-write = "true";
		gpmc,bus-turnaround-ns = <0>;
		gpmc,cycle2cycle-delay-ns = <0>;
		gpmc,clk-activation-ns = <0>;
		gpmc,wait-monitoring-ns = <0>;
		gpmc,wr-access-ns = <40>;
		gpmc,wr-data-mux-bus-ns = <0>;
		/* MTD partition table */
        	/* All SPL-* partitions are sized to minimal length
		 * which can be independently programmable. For
		 * NAND flash this is equal to size of erase-block */
		#address-cells = <1>;
		#size-cells = <1>;
		partition@0 {
			label = "NAND.SPL";
			reg = <0x00000000 0x000020000>;
		};
		partition@1 {
			label = "NAND.SPL.backup1";
			reg = <0x00020000 0x00020000>;
		};
		partition@2 {
			label = "NAND.SPL.backup2";
			reg = <0x00040000 0x00020000>;
		};
		partition@3 {
			label = "NAND.SPL.backup3";
			reg = <0x00060000 0x00020000>;
		};
		partition@4 {
			label = "NAND.u-boot-spl-os";
			reg = <0x00080000 0x00040000>;
		};
		partition@5 {
			label = "NAND.u-boot";
			reg = <0x000C0000 0x00100000>;
		};
		partition@6 {
			label = "NAND.u-boot-env";
			reg = <0x001C0000 0x00020000>;
		};
		partition@7 {
			label = "NAND.u-boot-env.backup1";
			reg = <0x001E0000 0x00020000>;
		};
		partition@8 {
			label = "NAND.kernel";
			reg = <0x00200000 0x00800000>;
		};
		partition@9 {
			label = "NAND.file-system";
			reg = <0x00A00000 0x1f600000>;
		};
		partition@10 {
			label = "Android NAND.u-boot";
			reg = <0x00080000 0x00260000>;
		};
		partition@11 {
			label = "Android NAND.u-boot-env";
			reg = <0x00260000 0x00280000>;
		};
		partition@12 {
			label = "Android Kernel";
			reg = <0x00280000 0x00780000>;
		};
		partition@13 {
			label = "Android File System";
			reg = <0x00780000 0x10000000>;
		};

	};
};

#if 0
&lcdc {
	status = "okay";
};

&dcan0 {
	pinctrl-names = "default";
	pinctrl-0 = <&dcan0_default>;
	status = "okay";
};
#endif

&mcasp0 {
		#sound-dai-cells = <0>;
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&mcasp0_pins>;
		pinctrl-1 = <&mcasp0_sleep_pins>;

		status = "okay";

		op-mode = <0>;          /* MCASP_IIS_MODE */
		tdm-slots = <2>;
		/* 16 serializer */
		serial-dir = <  /* 0: INACTIVE, 1: TX, 2: RX */
			0 0 2 1
		>;
		tx-num-evt = <32>;
		rx-num-evt = <32>;
};

#include "tps65910.dtsi"

&tps {

	ti,en-ck32k-xtal;

	vcc1-supply = <&vbat>;
	vcc2-supply = <&vbat>;
	vcc3-supply = <&vbat>;
	vcc4-supply = <&vbat>;
	vcc5-supply = <&vbat>;
	vcc6-supply = <&vbat>;
	vcc7-supply = <&vbat>;
	vccio-supply = <&vbat>;

	rtc0 {
		compatible = "ti,tps65910-rtc";
		interrupts = <0>;
	};

	regulators {
		vrtc_reg: regulator@0 {
			regulator-always-on;
		};

		vio_reg: regulator@1 {
			regulator-always-on;
		};

		vdd1_reg: regulator@2 {
			/* VDD_MPU voltage limits 0.95V - 1.325V with +/-4% tolerance */
			regulator-name = "vdd_mpu";
			regulator-min-microvolt = <912500>;
			regulator-max-microvolt = <1378000>;
			regulator-boot-on;
			regulator-always-on;
		};

		vdd2_reg: regulator@3 {
			/* VDD_CORE voltage limits 0.95V - 1.1V with +/-4% tolerance */
			regulator-name = "vdd_core";
			regulator-min-microvolt = <912500>;
			regulator-max-microvolt = <1150000>;
			regulator-boot-on;
			regulator-always-on;
		};

		vdd3_reg: regulator@4 {
			regulator-always-on;
		};

		vdig1_reg: regulator@5 {
			regulator-always-on;
		};

		vdig2_reg: regulator@6 {
			regulator-always-on;
		};

		vpll_reg: regulator@7 {
			regulator-always-on;
		};

		vdac_reg: regulator@8 {
			regulator-always-on;
		};

		vaux1_reg: regulator@9 {
			regulator-always-on;
		};

		vaux2_reg: regulator@10 {
			regulator-always-on;
		};

		vaux33_reg: regulator@11 {
			regulator-always-on;
		};

		vmmc_reg: regulator@12 {
			regulator-min-microvolt = <1800000>;
			regulator-max-microvolt = <3300000>;
			regulator-always-on;
		};
	};
};

&mac {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_default>;
	pinctrl-1 = <&cpsw_sleep>;
	dual_emac = <1>;
	status = "okay";
};

&davinci_mdio {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&davinci_mdio_default>;
	pinctrl-1 = <&davinci_mdio_sleep>;
	status = "okay";
	
	phy1: phy@1 {
		reg = <1>;
		/*micrel,reset-regs;*/
	};

	phy7: phy@7 {
		reg = <7>;
		rxc-skew-ps = <3000>;
		rxdv-skew-ps = <0>;
		txc-skew-ps = <3000>;
		txen-skew-ps = <0>;
		rxd0-skew-ps = <0>;
		rxd1-skew-ps = <0>;
		rxd2-skew-ps = <0>;
		rxd3-skew-ps = <0>;
		txd0-skew-ps = <0>;
		txd1-skew-ps = <0>;
		txd2-skew-ps = <0>;
		txd3-skew-ps = <0>;
	};	
};

&cpsw_emac0 {
	phy_id = <&davinci_mdio>, <1>;
	phy-mode = "rmii";
	dual_emac_res_vlan = <1>;
};

&cpsw_emac1 {
	phy_id = <&davinci_mdio>, <7>;
	phy-mode = "rgmii-txid";
	dual_emac_res_vlan = <2>;
};

&phy_sel {
	rmii-clock-ext;
};

&tscadc {
	status = "okay";
	tsc {
		ti,wires = <4>;
		ti,x-plate-resistance = <180>;
		ti,coordinate-readouts = <5>;
		ti,wire-config = <0x00 0x21 0x12 0x33>;
		ti,charge-delay = <0x700>;
		ti,alt_pins_conf;
	};

	adc {
		ti,adc-channels = <4 5 6 7>;
	};
};

&mmc1 {
	status = "okay";
	vmmc-supply = <&vmmc_reg>;
	bus-width = <4>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&mmc1_pins_default>;
	pinctrl-1 = <&mmc1_pins_sleep>;
#if 0
	cd-gpios = <&gpio1 28 GPIO_ACTIVE_HIGH>;
	wp-gpios = <&gpio2 18 GPIO_ACTIVE_HIGH>;
#endif
};

&mmc2 {
	status = "okay";
	vmmc-supply = <&wlan_en_reg>;
	bus-width = <4>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&mmc2_pins_default &wlan_pins_default>;
	pinctrl-1 = <&mmc2_pins_sleep &wlan_pins_sleep>;
	ti,non-removable;
	ti,needs-special-hs-handling;
	cap-power-off-card;
	keep-power-in-suspend;
	
	#address-cells = <1>;
	#size-cells = <0>;
	
	wlcore: wlcore@2 {
		compatible = "ti,wl1835";
		reg = <2>;
		interrupt-parent = <&gpio3>;
		interrupts = <20 IRQ_TYPE_LEVEL_HIGH>;

                /* For WL12xx card set the clock to WL12XX_REFCLOCK_38_XTAL */
                ref-clock-frequency = <38400000>;
	};	
};

&wkup_m3_ipc {
	ti,scale-data-fw = "am335x-evm-scale-data.bin";
};

&sgx {
	status = "okay";
};

&sham {
	status = "okay";
};

&aes {
	status = "okay";
};

&gpio0 {
	ti,no-reset-on-init;
};

&spi1 {
	status = "okay";

#if 0	
 /* NOTE: In order to use SPI on VAR-SOM-AM33 CustomBoard -
  *	1) Need to remove R9 and R10 resistors from the CustomBoard.
  *	2) Need to also remove U21 from the CustomBoard. 
  */

	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi1_pins_default>;
	pinctrl-1 = <&spi1_pins_sleep>;
#endif
	spidev0: spi@0 {
		compatible = "spidev";
		reg = <0>;
		spi-max-frequency = <16000000>;
		spi-cpha;
	};

	spidev1: spi@1 {
		compatible = "spidev";
		reg = <1>;
		spi-max-frequency = <16000000>;
	};
};
